/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockIntegrity,
  MockIntegrityInterface,
} from "../../../contracts/test/MockIntegrity";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "parent",
            type: "uint8",
          },
          {
            internalType: "enum ParameterType",
            name: "paramType",
            type: "uint8",
          },
          {
            internalType: "enum Operator",
            name: "operator",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "compValue",
            type: "bytes",
          },
        ],
        internalType: "struct ConditionFlat[]",
        name: "conditions",
        type: "tuple[]",
      },
    ],
    name: "enforce",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610410806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806333a2616f14610030575b600080fd5b61004361003e3660046101a3565b610045565b005b60405163783a904760e01b815273__$2cd9b773a3c3e0b461f7ad54b09f46e6ae$__9063783a90479061007c9084906004016102f6565b60006040518083038186803b15801561009457600080fd5b505af41580156100a8573d6000803e3d6000fd5b5050505050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156100e8576100e86100af565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610117576101176100af565b604052919050565b80356020811061012e57600080fd5b919050565b600082601f83011261014457600080fd5b813567ffffffffffffffff81111561015e5761015e6100af565b610171601f8201601f19166020016100ee565b81815284602083860101111561018657600080fd5b816020850160208301376000918101602001919091529392505050565b600060208083850312156101b657600080fd5b823567ffffffffffffffff808211156101ce57600080fd5b818501915085601f8301126101e257600080fd5b8135818111156101f4576101f46100af565b8060051b6102038582016100ee565b918252838101850191858101908984111561021d57600080fd5b86860192505b838310156102d35782358581111561023b5760008081fd5b86016080818c03601f19018113156102535760008081fd5b61025b6100c5565b8983013560ff8116811461026f5760008081fd5b8152604083810135600781106102855760008081fd5b828c0152606061029685820161011f565b838301529284013592898411156102af57600091508182fd5b6102bd8f8d86880101610133565b9083015250845250509186019190860190610223565b9998505050505050505050565b634e487b7160e01b600052602160045260246000fd5b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156103cb57603f198a85030186528251608060ff8251168652898201516007811061034e5761034e6102e0565b868b0152818901518a8110610365576103656102e0565b868a0152606091820151918601819052815190860181905283905b8082101561039e578282018b015187830160a00152908a0190610380565b86810160a0908101869052988b0198601f909101601f19169096019095019450509187019160010161031e565b5091999850505050505050505056fea2646970667358221220e5c87a8d4c1bf54bb6d741cf3a9527e4f1500aba1d6aac612bfac9231035fa9864736f6c63430008110033";

type MockIntegrityConstructorParams =
  | [linkLibraryAddresses: MockIntegrityLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockIntegrityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MockIntegrity__factory extends ContractFactory {
  constructor(...args: MockIntegrityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MockIntegrity__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MockIntegrityLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$2cd9b773a3c3e0b461f7ad54b09f46e6ae\\$__", "g"),
      linkLibraryAddresses["contracts/Integrity.sol:Integrity"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockIntegrity> {
    return super.deploy(overrides || {}) as Promise<MockIntegrity>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockIntegrity {
    return super.attach(address) as MockIntegrity;
  }
  override connect(signer: Signer): MockIntegrity__factory {
    return super.connect(signer) as MockIntegrity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockIntegrityInterface {
    return new utils.Interface(_abi) as MockIntegrityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockIntegrity {
    return new Contract(address, _abi, signerOrProvider) as MockIntegrity;
  }
}

export interface MockIntegrityLibraryAddresses {
  ["contracts/Integrity.sol:Integrity"]: string;
}
