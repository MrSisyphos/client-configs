/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Integrity, IntegrityInterface } from "../../contracts/Integrity";

const _abi = [
  {
    inputs: [],
    name: "NotBFS",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "UnsuitableChildCount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "UnsuitableChildTypeTree",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "UnsuitableCompValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "UnsuitableParameterType",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "UnsuitableParent",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsuitableRootNode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "UnsupportedOperator",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "parent",
            type: "uint8",
          },
          {
            internalType: "enum ParameterType",
            name: "paramType",
            type: "ParameterType",
          },
          {
            internalType: "enum Operator",
            name: "operator",
            type: "Operator",
          },
          {
            internalType: "bytes",
            name: "compValue",
            type: "bytes",
          },
        ],
        internalType: "struct ConditionFlat[]",
        name: "conditions",
        type: "tuple[]",
      },
    ],
    name: "enforce",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type IntegrityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntegrityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Integrity__factory extends ContractFactory {
  constructor(...args: IntegrityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Integrity> {
    return super.deploy(overrides || {}) as Promise<Integrity>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Integrity {
    return super.attach(address) as Integrity;
  }
  override connect(signer: Signer): Integrity__factory {
    return super.connect(signer) as Integrity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntegrityInterface {
    return new utils.Interface(_abi) as IntegrityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Integrity {
    return new Contract(address, _abi, signerOrProvider) as Integrity;
  }
}
